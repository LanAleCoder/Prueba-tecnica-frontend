---
import Header from "../../common/header/header.astro";
import Footer from "../../common/footer/footer.astro";
import Head from "../../common/head/head.astro";
import "@fontsource-variable/nunito";
import  SpeedInsights  from "@vercel/speed-insights/astro"


interface Props {
  ogTitle?: string;
  ogDescription?: string;
  title?: string;
  pageDescription?: string;
  imagePage?: string;
}

const { ogTitle, ogDescription, title, pageDescription, imagePage } =
  Astro.props;
---

<html lang="en">
  <Head
    ogTitlte={ogTitle}
    ogDescription={ogDescription}
    title={title}
    pageDescription={pageDescription}
    imagePage={imagePage}
  />
  <body>
    <SpeedInsights/>
    <Header />
    <slot />
    <Footer />
    <style is:global>
      :root[data-theme="light"] {
        --bg-color: #e9e9e9;
        --text-color: #111111;
      }

      :root[data-theme="dark"] {
        --bg-color: #121212;
        --text-color: #f5f5f5;
      }

      @media (prefers-reduce-motion: reduce) {
        * {
          animation: none;
          transition: none;
        }
      }

      * {
        margin: 0;
        padding: 0;
        border: 0;
        box-sizing: border-box;
        vertical-align: baseline;
      }

      .row {
        --bs-gutter-x: 1.5rem;
        --bs-gutter-y: 0;
        display: flex;
        flex-wrap: wrap;
        margin-top: calc(var(--bs-gutter-y) * -1);
        margin-right: calc(var(--bs-gutter-x) / -2);
        margin-left: calc(var(--bs-gutter-x) / -2);
      }

      .g-5,
      .gy-5 {
        --bs-gutter-y: 3.5rem;
      }

      .g-4,
      .gx-4 {
        --bs-gutter-x: 2rem;
      }

      .row > * {
        box-sizing: border-box;
        flex-shrink: 0;
        width: 100%;
        max-width: 100%;
        padding-right: calc(var(--bs-gutter-x) / 2);
        padding-left: calc(var(--bs-gutter-x) / 2);
        margin-top: var(--bs-gutter-y);
      }

      img,
      picture {
        max-width: 100%;
        width: 100%;
        display: block;
        object-fit: cover;
        object-position: center center;
      }
      a {
        display: block;
      }

      p a {
        display: inline;
      }

      li {
        list-style-type: none;
      }

      html {
        scroll-behavior: smooth;
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      p,
      span,
      a,
      strong,
      blockquote,
      i,
      b,
      u,
      em {
        font-size: 1em;
        font-weight: inherit;
        font-style: inherit;
        text-decoration: none;
        color: inherit;
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        font-weight: 700;
        line-height: 1.25;
      }

      blockquote::before,
      blockquote::after,
      q::before,
      q::after {
        content: "";
        content: none;
      }

      ::selection {
        background-color: var(--color-primary);
        color: var(--color-secundary);
      }

      form,
      input,
      textarea,
      select,
      button,
      label {
        font-family: inherit;
        font-size: inherit;
        hyphens: auto;
        background-color: transparent;
        display: block;
        color: inherit;
      }
      table,
      tr,
      td {
        border-collapse: collapse;
        border-spacing: 0;
      }

      svg {
        width: 100%;
        display: block;
        fill: currentColor;
      }

      body {
        min-height: 100vh;
        font-size: 100%;
        font-family: "Nunito Variable", sans-serif;
        font-smooth: always;
        background-color: var(--bg-color);
        color: var(--text-color);
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        transition: 0.2s ease-in-out all;
      }

      @media screen and (min-width: 768px) {
        h3,
        .h3 {
          font-size: 1.953125rem;
        }
        h2,
        .h2 {
          font-size: 2.44140625rem;
        }
      }
    </style>
    <script>
      const root = document.documentElement;
      const dataTheme = localStorage.getItem("theme");

      const colorScheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light";

      const newTheme = dataTheme ?? colorScheme;

      root.setAttribute("data-theme", newTheme);
    </script>
  </body>
</html>
